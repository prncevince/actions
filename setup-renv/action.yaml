name: 'setup-renv'
description: 'Action to use {renv} for package installation & actions/cache GHA to cache all installed packages.'
inputs:
  type:
    description: > 
      The type of {renv} package install & setup. Choose 1 of: ['r-pkg', 'restore']
      r-pkg: installs packages based on DESCRIPTION file for `R CMD check` to be
        ran on your R package via {rcmdcheck} & r-lib/actions/check-r-package GHA 
      restore: restores package cache from specified renv.lock file set in `inputs.lockfile`
    required: true
  cache-version:
    description: 'The version of the cache. Change this to bust cache & trigger storing a new cache.'
    required: true
    default: 1
  lockfile: 
    description: "Relative path to the renv.lock file. Only necessary for when `inputs.type` is set to 'restore'"
    required: true
    default: 'renv.lock'
runs:
  using: 'composite'
  steps:
      - name: Set RENV_PATHS_ROOT
        shell: bash
        run: echo 'RENV_PATHS_ROOT=${{ runner.temp }}/renv' >> $GITHUB_ENV
      - name: Install and activate renv
        shell: Rscript {0}
        run: paste("activated via ./renv & ./.Rprofile")
      - name: Set LOCKFILE
        shell: bash
        run: |
          if [[ ${{ inputs.type }} == 'r-pkg' ]]; then
            echo 'LOCKFILE=renv.lock' >> $GITHUB_ENV
          else
            echo 'LOCKFILE=${{ inputs.lockfile }}' >> $GITHUB_ENV
          fi 
      - name: Get R and OS version
        id: get-version
        shell: Rscript {0}
        run: |
          cat("##[set-output name=os-version;]", sessionInfo()$running, "\n", sep = "")
          cat("##[set-output name=r-version;]", R.Version()$version.string, sep = "")
      - name: Restore {renv} package cache
        uses: actions/cache@v3
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{ github.workflow }}-${{ inputs.cache-version }}-${{ hashFiles(env.LOCKFILE) }}
          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{ github.workflow }}-${{ inputs.cache-version }}-
      - name: Install packages from DESCRIPTION & write new lockfile 
        if: inputs.type == 'r-pkg'
        shell: Rscript {0}
        run: |
          renv::install()
          if (!'rcmdcheck' %in% installed.packages()[,1]) renv::install('rcmdcheck')
          if (file.exists('renv.lock')) file.remove('renv.lock')
          renv::snapshot()          
      - name: Restore packages from renv.lock file
        if: inputs.type == 'restore'
        shell: Rscript {0}
        run: renv::restore(lockfile = "${{ inputs.lockfile }}")